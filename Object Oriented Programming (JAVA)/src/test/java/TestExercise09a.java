/**
 * DO NOT EDIT THIS FILE 
 * author: Ronny Hartanto (2021)
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.GregorianCalendar;

public class TestExercise09a {

  @Test
  public void test01() {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    GregorianCalendar date = new GregorianCalendar(1990, 01, 01);
    GregorianCalendar date2 = new GregorianCalendar(2022, 04, 28);
    Student student1 = new Student("A", "B");
    student1.setStudyCourse(StudyCourse.ME);
    assertEquals(student1.getStudyCourse(), StudyCourse.ME);
    Student student2 = new Student("C", "D");
    assertEquals(student2.getID(), "10001");
    student2.setStudyCourse("EL");
    assertEquals(student2.getStudyCourse(), StudyCourse.EL);
    Student student3 = new Student("E", "F", date.getTime());
    Student student4 = new Student("G", "H", date.getTime());
    assertEquals(student4.getID(), "10003");
    User user = student4;
    assertEquals(user.getFQUN(), "10003@student.hsrw");
    assertEquals(((User) student3).getBirthDate(), date.getTime());
    student4.setStudyCourse("MME");
    assertEquals("Mechanical Engineering, M.Sc.", student4.getStudyCourseDescription());
    Professor prof1 = new Professor("xye", "X", "Ye");
    Professor prof2 = new Professor("abc", "A", "Bc", date.getTime());
    assertEquals(prof1.getFaculty(), Faculty.TUB);
    assertEquals(prof1.getFQUN(), "xye@staff.hsrw");
    prof2.setFaculty(Faculty.KU);
    prof2.setPhone(555);
    assertEquals(prof2.getFaculty(), Faculty.KU);
    assertEquals(prof2.getPhone(), "+49 2842 908 555");
    user = prof2;
    assertEquals(user.getFQUN(), "abc@staff.hsrw");
    Course oop = new Course("EL-2309", "Object Oriented Programming", prof1, 5);
    Course de = new Course("EL-2302", "Digital Electronics", prof1, 5);
    Classroom oop_class = new Classroom(oop, "Webex");
    Classroom de_class = new Classroom(de, "01 02 006", date2.getTime());
    assertEquals("WS2021/22", oop_class.getTerm());
    assertEquals("SS2022", de_class.getTerm());
    assertEquals("EL-2309-WS2021/22", oop_class.getID());
    assertEquals("EL-2302-SS2022", de_class.getID());
    oop_class.addStudent(student1);
    oop_class.addStudent(student2);
    oop_class.addStudent(student3);
    oop_class.addStudent(student4);
    assertTrue(oop_class.getParticipantsEmail().contains("A.B@hsrw.org"));  
    assertTrue(oop_class.getParticipantsEmail().contains("C.D@hsrw.org"));  
    assertTrue(oop_class.getParticipantsEmail().contains("E.F@hsrw.org"));  
    assertTrue(oop_class.getParticipantsEmail().contains("G.H@hsrw.org"));  
    assertEquals(4, oop_class.getTotalParticipants());
    System.setOut(originalOut);
  }
   @Test
   public void test02()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     GregorianCalendar date = new GregorianCalendar(1990, 01, 01);
     Student student1 = new Student("A", "B");
     student1.setStudyCourse(StudyCourse.ME);
     assertEquals(student1.getStudyCourse(), StudyCourse.ME);
     Student student2 = new Student("C", "D");
     assertEquals(student2.getID(), "10001");
     student2.setStudyCourse("EL");
     assertEquals(student2.getStudyCourse(), StudyCourse.EL);
     Student student3 = new Student("E", "F", date.getTime());
     Student student4 = new Student("G", "H", date.getTime());
     assertEquals(student4.getID(), "10003");
     User user = student4;
     assertEquals(user.getFQUN(), "10003@student.hsrw");
     assertEquals(((User) student3).getBirthDate(), date.getTime());
     student4.setStudyCourse("MME");
     assertEquals("Mechanical Engineering, M.Sc.", student4.getStudyCourseDescription());
     Professor prof1 = new Professor("xye", "X", "Ye");
     Professor prof2 = new Professor("abc", "A", "Bc", date.getTime());
     assertEquals(prof1.getFaculty(), Faculty.TUB);
     assertEquals(prof1.getFQUN(), "xye@staff.hsrw");
     prof2.setFaculty(Faculty.KU);
     prof2.setPhone(555);
     assertEquals(prof2.getFaculty(), Faculty.KU);
     assertEquals(prof2.getPhone(), "+49 2842 908 555");
     user = prof2;
     assertEquals(user.getFQUN(), "abc@staff.hsrw");
     Course oop = new Course("EL-2309", "Object Oriented Programming", prof1, 5);
     Classroom oop_class = new Classroom(oop, "Webex");
     assertEquals("WS2021/22", oop_class.getTerm());
     assertEquals("EL-2309-WS2021/22", oop_class.getID());
     oop_class.addStudent(student1);
     oop_class.addStudent(student2);
     oop_class.addStudent(student3);
     oop_class.addStudent(student4);
     for (int i=1; i<20; i++) {
       oop_class.addStudent(new Student("A",Integer.toString(i), date.getTime()));
       oop_class.addStudent(student1);
       oop_class.addStudent(student2);
     }
     assertEquals(23, oop_class.getTotalParticipants());
     oop_class.removeStudent(student1);
     assertTrue(oop_class.isParticipating(student2));
     assertFalse(oop_class.isParticipating(student1));    
     oop_class.removeStudent(student3);
     String email = oop_class.getParticipantsEmail();
     assertFalse(email.contains("E.F@hsrw.org"));
     assertTrue(email.contains("A.12@hsrw.org"));
     for (int i=1; i<100; i++) {
      oop_class.addStudent(new Student("A" + Integer.toString(i), "Fam" + Integer.toString(i), date.getTime()));
      oop_class.addStudent(student1);
      oop_class.addStudent(student2);
    }
    assertEquals(121, oop_class.getTotalParticipants());  
    System.setOut(originalOut);
    oop_class.save("participants.txt");
    oop_class.removeAllParticipants();
    assertEquals(0, oop_class.getTotalParticipants());
    Classroom oop2_class = new Classroom(oop, "Audimax");
    oop2_class.load("participants.txt");
    assertEquals(121, oop2_class.getTotalParticipants());  
    email = oop2_class.getParticipantsEmail();
    assertFalse(email.contains("E.F@hsrw.org"));
    assertTrue(email.contains("A.12@hsrw.org"));
    assertTrue(email.contains("A99.Fam99@hsrw.org"));
   }
}
